 1. create html and style.css
 2. add product attributes
 3. add link, image, name and price

Create react app
 1.npx create-react-app frontend
 2.npm start - to start te server
 3.remove unused files
 4.copy html file and css file 


Create Rating and Product Component
  1.create components/Rating.js
  2.create div.rating
  3.style div.rating, span and last span
  4.create Product components
  5.using Rating component


Create Product screen
  1.install react-router-dom - we can define multiple routes for our application
  2.Use BrowserRouter and Route for Home screen
  3.Create HomeScreen.js
  4.Add product list code there
  5.create ProductScreen.js
  6.Add new Route from product details to App.js
  7.Create 3 columns for product image, info and action

Create Node.js server(install - express, nodemon- for automatic restarting the node application )
  1.run npm init root folder - package.json file is created
  2.update package.json set type: module
  3.Add .js to imports
  4.npm install express
  5.create server.js
  6.add start command as node backend/server.js
  7.require express
  8.create route for / return backend is ready
  9.move data.js from frontend to backend
  10.create router for /api/products
  11.return products
  12.run npm start

Load products from backend
 firstly change package.json in frontend folder i.e: add proxy 
 install axios - it is a library to send ajax request to server
 fetch data from backend to frontend 
 
  1.edit HomeScreen.js
  2.define products, loading and error
  3.create useEffect
  4.define async fetchData and call init
  5.install axios
  6.get data from /api/products
  7.show them in the list
  8.create loading component
  9.create Message Box component
  10.use them in HomeScreen


12. Add redux to HomeScreen
  1.npm install redux react-redux
  2.Create store.js
     create redux store- to create redux store we need two things - 1.initialState 2.reducer
  3.initState= {products:[]}
  4.reducer = {state, action} => switch LOAD_PRODUCTS: {products: action.payload}
  5.export default createStore(reducer, initState)
      use redux store - i.e index.js
  6.Edit HomeScreen.js
  7.shopName = useSelector(state => state.products)
  8.const dispatch = useDispatch()
  9.useEffect(() => dispatch({type: LOAD_PRODUCTS, payload: data})
  10.add store to index.js

13.Add Redux to ProductScreen
   1.create product details constants, actions, reducers
   2.add reducer to store
   3.use action in ProductScreen.js
   4.add /api/product/:id to backend api
   
14.Handle Add to cart button
   1.Handle add to cart in ProductScreen.js
   2.create cartScreen.js
   
15.Implement Add to Cart Action
   1.create addToCart constants, actions and reducers
   2.add reducer to store.js
   3.use action in cartScreen.js
   4.render cartItem.js
   
16.Build Cart screen
   1.create 2 columns for cart items and cart actions
   2.cartItems.length === 0 ? cart is empty
   3.show item image, name, qty and price
   4.Proceed to checkout button
   5.implement remove from cart actions

17.Implement Remove cart from Action
   1.create RemoveFromCart constants, actions and reducers
   2.add reducer to store.js
   3.use action in cartScreen.js

18.Connect to Mongo db
   1.npm install mongoose
   2.connect to mongo db
   3.create config.js
   4.npm install bcrypt
   5.export MONGODB_URL
   6.create models/UserModel.js
   7.create userSchema and UserModel
   8.create models/productModel.js
   9.create productSchema and productModel
   10.create userRoute
   11.Seed sample data

19.Create sample products in mongodb
   1.create models/productModel.js
   2.create productSchema and productModel
   3.create productRoute
   4.Seed sample data

20.Create sign-in backend
   1.create / signin api
   2.check email and password
   3.generate token
   4.install json web token
   5.install dotenv
   6.return token and data
   7.test it using postman

21.Design Signin screen
   1.create signin screen
   2.render email and password
   3.create signin constants, actions, reducers
   4.Update Header based on user login
   
22.Implement Signin action
   1.create signin constants, actions and reducers
   2.add reducer to store.js
   3.use action in SigninScreen.js

23.Create Register Screen and backend api
   1.create API for /api/users/register
   2.insert new user to database
   3.return user info and token
   4.create RegisterScreen 
   5.Add fields
   6.Style fields
   7.Add screen to app.js

24.Create shipping screen
   1.create CheckoutSteps.js component
   2.create shipping fields
   3.implement shipping constant, actions and reducers

25.Creating Payment screen
   1.create payment fields
   2.implement shipping constant, actions and reducers

26.Design place order screen
   1.design order summary fields
   2.design order action

27.Create the place order screen
   1.createOrder api
   2.create orderModel
   3.create orderRouter
   4.create post order route

28.implement Placeorder action 
   1.handle place order button click
   2.create place order constants, action and reducer

29.Create Order Screen
   1.build order api for /api/orders/:id
   2.create OrderScreen.js
   3.dispatch order details action in useEffect
   4.load data with useSelector
   5.show data like placeorder screen
   6.create order details constants, actions and reducers

30.Add Paypal button
   1.get client id from Paypal
   2.set it in .env file
   3.create route from /api/paypal/clientId
   4.create getPaypalClientId in api.js
   5.add paypal checkout script in orderscreen.js
   6.show paypal button

31.implement Order payment
   1.update order after payment
   2.create payOrder in api.js
   3.create route for /:id/pay in orderRoute.js
   4.rerender after pay order

32.Display order history
   1.create a customer orders api
   2.create api for getMyOrders
   3.show orders in profile screen
   4.style orders

33.Display user profile
   1.create user details api
   2.show user information

34.Update the userProfile
   1.create user update api
   2.update te user info


35.Create Admin View
   1.Create Admin menu
   2.create Admin Middleware in backend
   3.create admin route in frontend

36.List products
   1.Create product list screen
   2.Add reducer to store
   3.show products on the screen


37.Create product
   1.build create product api
   2.build Create Product button
   3.define product create constant, action and reducer
   4.use action in Product list screen
   
38.Build Product Edit screen
   1.create edit screen
   2.define state
   3.create fields
   4.load product details
   5.add to routes

39.update product
   1.define update api
   2.define product update constant, action and reducers
   3.use action in Product edit screen













   



   
   
   



















   
   